import logging
import time
import asyncio
import uuid
import json
import sqlite3
from typing import Dict, Optional

from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.types import Message
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command
from aiogram.exceptions import TelegramBadRequest

from openai import AsyncOpenAI
from config import (
    TELEGRAM_BOT_TOKEN,
    OPENAI_API_KEY,
    SECRET_KEYWORD,
    OPENAI_BASE_URL,
    OPENAI_MODEL
)
from database import init_db, save_interaction, get_user_model, set_user_model, DB_PATH
from utils import num_tokens_from_messages, calculate_cost

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞—Ä–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
active_requests: Dict[int, float] = {}  # –¢–∞–π–º—Å—Ç–∞–º–ø—ã –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
authorized_users: Dict[int, bool] = {}  # –ö—ç—à –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5 –º–∏–Ω—É—Ç)
REQUEST_TIMEOUT = 300
# –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ –∫—ç—à–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)
AUTH_CACHE_TTL = 3600

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = AsyncOpenAI(
    api_key=OPENAI_API_KEY,
    base_url=OPENAI_BASE_URL
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TELEGRAM_BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())
router = Router()

async def send_long_message(message: Message, text: str, max_length: int = 4096, edit_message=None) -> None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–∞—Å—Ç—è–º–∏ –∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    
    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è aiogram
        text: –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —á–∞—Å—Ç–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 4096)
        edit_message: –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (aiogram.types.Message)
    """
    parts = [text[x:x + max_length] for x in range(0, len(text), max_length)]
    for i, part in enumerate(parts):
        try:
            if i == 0 and edit_message is not None:
                await edit_message.edit_text(part)
            else:
                await message.reply(part)
        except TelegramBadRequest as e:
            logger.error(f"Failed to send message part: {e}")

@router.message(Command("test_long_message"))
async def test_long_message(message: Message) -> None:
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    """
    user_id = message.from_user.id
    model = get_user_model(user_id)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç (>4000 —Å–∏–º–≤–æ–ª–æ–≤)
    long_text = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞.\n" * 100
    
    try:
        if model == "deepseek-reasoner":
            # –î–ª—è –º–æ–¥–µ–ª–∏ —Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º–∏ —Ä–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏
            reasoning_part = "üß† –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:\n\n" + "–ó–¥–µ—Å—å –±—É–¥—É—Ç –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è –º–æ–¥–µ–ª–∏...\n" * 200
            answer_part = "üí° –û—Ç–≤–µ—Ç:\n\n" + long_text
            
            await send_long_message(message, reasoning_part)
            await send_long_message(message, answer_part)
        else:
            # –î–ª—è –æ–±—ã—á–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            await send_long_message(message, long_text)
    except Exception as e:
        logger.error(f"Error in test_long_message for user {user_id}: {e}")
        await message.reply("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")

@router.message(Command("auth"))
async def auth_user(message: Message) -> None:
    """
    –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    """
    user_id = message.from_user.id
    args = message.text.split()
    
    if len(args) != 2:
        await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /auth <—Å–µ–∫—Ä–µ—Ç–Ω—ã–π_–∫–ª—é—á>")
        return
    
    if args[1] != SECRET_KEYWORD:
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_settings'")
            if not cursor.fetchone():
                init_db()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ user_settings
            cursor.execute('''
                INSERT OR REPLACE INTO user_settings (user_id, is_authorized, model_name)
                VALUES (?, 1, 'deepseek-chat')
            ''', (user_id,))
            conn.commit()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        save_interaction(
            user_id=user_id,
            conversation_id=str(uuid.uuid4()),
            message_type='prompt',
            content='auth_command',
            tokens=0,
            cost=0,
            timestamp=time.time(),
            model_name='system'
        )
        
        # –û—á–∏—â–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å—Ç–∞—Ä—ã–π —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
        active_requests.pop(user_id, None)
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        authorized_users[user_id] = True
        await message.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞.")
    except Exception as e:
        logger.error(f"Error authorizing user {user_id}: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞.")

@router.message(Command("model"))
async def handle_model_command(message: Message):
    await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /model_chat –∏–ª–∏ /model_reasoner –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏")

@router.message(Command("model_chat"))
async def set_model_chat(message: Message) -> None:
    """
    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ deepseek-chat –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    """
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ get_user_model
        model = get_user_model(user_id)
        if model == "deepseek-chat":
            await message.answer("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ deepseek-chat")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='interactions'")
            if not cursor.fetchone():
                init_db()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_user_model(user_id, "deepseek-chat")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        save_interaction(
            user_id=user_id,
            conversation_id=str(uuid.uuid4()),
            message_type='system',
            content='model_change_to_chat',
            tokens=0,
            cost=0,
            timestamp=time.time(),
            model_name='deepseek-chat'
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM conversation_context WHERE user_id = ?", (user_id,))
            conn.commit()
        
        await message.answer("‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ deepseek-chat\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω")
    except Exception as e:
        logger.error(f"Error setting model_chat for user {user_id}: {str(e)}")
        error_details = f"–û—à–∏–±–∫–∞: {str(e)}" if str(e) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await message.answer(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏\n"
            f"üîπ {error_details}\n"
            f"üîπ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new"
        )

@router.message(Command("new"))
async def new_conversation(message: Message) -> None:
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    """
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ë–î –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        init_db()
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –¥–∏–∞–ª–æ–≥–µ
        save_interaction(
            user_id=user_id,
            conversation_id=str(uuid.uuid4()),
            message_type='system',
            content='new_conversation',
            tokens=0,
            cost=0,
            timestamp=time.time(),
            model_name='system'
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM conversation_context WHERE user_id = ?", (user_id,))
            conn.commit()
        
        await message.reply("‚úÖ –ù–æ–≤—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞—á–∞—Ç. –ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—á–∏—â–µ–Ω.")
    except Exception as e:
        logger.error(f"Error starting new conversation for user {user_id}: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

@router.message(Command("context"))
async def show_context(message: Message) -> None:
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    """
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        model = get_user_model(user_id)
        if model == "system":  # –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth <–∫–ª—é—á> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='conversation_context'")
            if not cursor.fetchone():
                await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç.")
                return

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π conversation_id
        conversation_id = await _get_conversation_id(user_id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫–∞–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        save_interaction(
            user_id=user_id,
            conversation_id=conversation_id,
            message_type='system',
            content='show_context_request',
            tokens=0,
            cost=0,
            timestamp=time.time(),
            model_name='system'
        )

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ë–î
        context = []
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                SELECT role, content FROM conversation_context
                WHERE user_id = ? AND conversation_id = ?
                ORDER BY timestamp
            ''', (user_id, conversation_id))
            
            for role, content in cursor.fetchall():
                prefix = "üë§ –í—ã: " if role == 'user' else "ü§ñ –ë–æ—Ç: "
                context.append(f"{prefix}{content}")

        if context:
            await send_long_message(message, "\n\n".join(context))
        else:
            await message.reply("–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—É—Å—Ç.")
    except Exception as e:
        logger.error(f"Error showing context for user {user_id}: {e}")
        await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")

@router.message(Command("model_reasoner"))
async def set_model_reasoner(message: Message) -> None:
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏ deepseek-reasoner –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    """
    user_id = message.from_user.id
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ get_user_model
        model = get_user_model(user_id)
        if model == "deepseek-reasoner":
            await message.reply("‚úÖ –ú–æ–¥–µ–ª—å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ deepseek-reasoner")
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='interactions'")
            if not cursor.fetchone():
                init_db()
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        set_user_model(user_id, "deepseek-reasoner")
            
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏
        save_interaction(
            user_id=user_id,
            conversation_id=str(uuid.uuid4()),
            message_type='system',
            content='model_change_to_reasoner',
            tokens=0,
            cost=0,
            timestamp=time.time(),
            model_name='deepseek-reasoner'
        )
        
        # –û—á–∏—â–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        with sqlite3.connect(DB_PATH) as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM conversation_context WHERE user_id = ?", (user_id,))
            conn.commit()
        
        await message.reply(
            "‚úÖ –ú–æ–¥–µ–ª—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ deepseek-reasoner\n"
            "üîπ –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—á–∏—â–µ–Ω\n"
            "üîπ –¢–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è Chain-of-Thought –ø–æ–¥—Ö–æ–¥"
        )
    except Exception as e:
        logger.error(f"Error setting model_reasoner for user {user_id}: {str(e)}")
        error_details = f"–û—à–∏–±–∫–∞: {str(e)}" if str(e) else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
        await message.reply(
            f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏\n"
            f"üîπ {error_details}\n"
            f"üîπ –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /new"
        )

async def _get_conversation_id(user_id: int) -> str:
    """Internal helper: Returns current conversation ID or creates new one"""
    if not isinstance(user_id, int):
        raise ValueError("user_id must be integer")
    
    conn = None
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        
        # Check if interactions table exists with required columns
        cursor.execute("PRAGMA table_info(interactions)")
        columns = [col[1] for col in cursor.fetchall()]
        required_columns = {'user_id', 'conversation_id', 'timestamp'}
        
        if not required_columns.issubset(columns):
            return str(uuid.uuid4())
            
        cursor.execute('''
            SELECT conversation_id FROM interactions 
            WHERE user_id = ? 
            ORDER BY timestamp DESC 
            LIMIT 1
        ''', (user_id,))
        result = cursor.fetchone()
    except sqlite3.Error as e:
        logging.error(f"Database error in _get_conversation_id: {e}")
        return str(uuid.uuid4())
    finally:
        if conn:
            conn.close()
    return result[0] if result else str(uuid.uuid4())

@router.message()
async def handle_message(message: Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    if user_id in authorized_users:
        if not authorized_users[user_id]:
            await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth <–∫–ª—é—á> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return
    else:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã user_settings
            with sqlite3.connect(DB_PATH) as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='user_settings'")
                if not cursor.fetchone():
                    init_db()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
                cursor.execute('SELECT is_authorized FROM user_settings WHERE user_id = ?', (user_id,))
                result = cursor.fetchone()
                
            if not result or not result[0]:
                authorized_users[user_id] = False
                await message.reply("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth <–∫–ª—é—á> –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return
            else:
                authorized_users[user_id] = True
        except Exception as e:
            logger.error(f"Error checking authorization for user {user_id}: {e}")
            await message.reply("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    last_request_time = active_requests.get(user_id)
    if last_request_time:
        if time.time() - last_request_time < REQUEST_TIMEOUT:
            await message.reply("–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞, –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
        else:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–π –∑–∞–ø—Ä–æ—Å
            active_requests.pop(user_id, None)
        
    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if not message.text or message.text.startswith('/'):
        return
        
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —Å timestamp
    active_requests[user_id] = time.time()
    
    try:
        user_input = message.text.strip()
        if not user_input:
            await message.reply("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç
        wait_msg = await message.reply("–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç!")
    except Exception as e:
        logging.error(f"Error processing message: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        active_requests.pop(user_id, None)  # –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        return
    
        
    prompt = user_input.strip()
    user_id = message.from_user.id
    conversation_id = await _get_conversation_id(user_id)
    if not prompt:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–º–ø—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ —Å–µ–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–ª–æ–≤–∞")
        return
        
    user_id = message.from_user.id
    username = message.from_user.username or "unknown"

    model = get_user_model(user_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π)
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã conversation_context
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='conversation_context'")
    if not cursor.fetchone():
        history = []
    else:
        cursor.execute('''
            SELECT role, content FROM conversation_context
            WHERE user_id = ? AND conversation_id = ?
            ORDER BY timestamp ASC
            LIMIT 10
        ''', (user_id, conversation_id))
        history = [{"role": row[0], "content": row[1]} for row in cursor.fetchall()]
    conn.close()
    
    # –î–ª—è deepseek-reasoner –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ Q&A –ø–∞—Ä—ã (–±–µ–∑ reasoning)
    if model == "deepseek-reasoner":
        messages = []
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ user/assistant —Å–æ–æ–±—â–µ–Ω–∏—è (–∏—Å–∫–ª—é—á–∞—è reasoning)
        for msg in history:
            if msg["role"] == "user":
                # –î–æ–±–∞–≤–ª—è–µ–º user —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –±—ã–ª–æ assistant –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç
                if not messages or messages[-1]["role"] == "assistant":
                    messages.append({"role": msg["role"], "content": msg["content"]})
            elif msg["role"] == "assistant":
                content = msg["content"]
                # –ï—Å–ª–∏ —ç—Ç–æ –±—ã–ª –æ—Ç–≤–µ—Ç reasoner, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ answer —á–∞—Å—Ç—å
                if content.startswith('{"reasoning"'):
                    try:
                        content = json.loads(content)["answer"]
                    except:
                        content = content.split('"answer":')[1].split('"')[1]
                # –î–æ–±–∞–≤–ª—è–µ–º assistant —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥ –Ω–∏–º –µ—Å—Ç—å user —Å–æ–æ–±—â–µ–Ω–∏–µ
                if messages and messages[-1]["role"] == "user":
                    messages.append({"role": msg["role"], "content": content})
        
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä–≤—ã–π message - user (–µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)
        if not messages:
            messages.append({"role": "user", "content": prompt})
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - assistant, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π user prompt
        elif messages[-1]["role"] == "assistant":
            messages.append({"role": "user", "content": prompt})
        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - user, –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ –Ω–∞ –Ω–æ–≤—ã–π prompt
        else:
            messages[-1]["content"] = prompt
    else:
        # –î–ª—è deepseek-chat –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é
        messages = history + [{"role": "user", "content": prompt}]
    tokens_in = num_tokens_from_messages(messages, model=model)

    start_time = time.time()
    reply_text = ""
    sent_message = None
    tokens_out = 0
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É—Ñ–µ—Ä–∞
    accumulated_text = ""
    last_sent_text = ""
    last_update_time = 0
    
    try:
        stream = await client.chat.completions.create(
            model=model,
            messages=messages,
            temperature=0.7,
            stream=True
        )
        
        reasoning_text = ""
        answer_text = ""
        tokens_out = 0

        # –ü—Ä–æ—Å—Ç–æ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç (–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å)
        async for chunk in stream:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ reasoning –¥–ª—è reasoner –º–æ–¥–µ–ª–∏
            if model == "deepseek-reasoner" and hasattr(chunk.choices[0].delta, 'reasoning_content'):
                reasoning_text += chunk.choices[0].delta.reasoning_content or ""
                tokens_out += 1

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            if hasattr(chunk.choices[0].delta, 'content') and chunk.choices[0].delta.content:
                answer_text += chunk.choices[0].delta.content
                tokens_out += 1

        # –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å—Ç—Ä–∏–º–∞ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –∑–∞–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ "–í–∞—à –∑–∞–ø—Ä–æ—Å –ø—Ä–∏–Ω—è—Ç"
        if answer_text.strip():
            if model == "deepseek-reasoner":
                await send_long_message(message, f"\U0001F9E0 –†–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:\n\n{reasoning_text.strip()}\n\n\U0001F4A1 –û—Ç–≤–µ—Ç:\n\n{answer_text.strip()}", edit_message=wait_msg)
            else:
                await send_long_message(message, answer_text.strip(), edit_message=wait_msg)

    except Exception as e:
        await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GPT:\n\n{e}")
        return
    finally:
        # –í—Å–µ–≥–¥–∞ —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        active_requests.pop(user_id, None)

    # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
    end_time = time.time()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–∞
    prompt_cost = calculate_cost(model=model, tokens=tokens_in, token_type="input")
    response_cost = calculate_cost(model=model, tokens=tokens_out, token_type="output")
    total_cost = round(prompt_cost + response_cost, 6)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç
    save_interaction(
        user_id=user_id,
        conversation_id=conversation_id,
        message_type='prompt',
        content=prompt,
        tokens=tokens_in,
        cost=prompt_cost,
        timestamp=start_time,
        model_name=model
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    save_interaction(
        user_id=user_id,
        conversation_id=conversation_id,
        message_type='response',
        content=answer_text if model != "deepseek-reasoner" else json.dumps({
            "reasoning": reasoning_text.strip(),
            "answer": answer_text.strip()
        }),
        tokens=tokens_out,
        cost=response_cost,
        timestamp=end_time,
        model_name=model
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã conversation_context
    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='conversation_context'")
    if cursor.fetchone():
        cursor.execute('''
            INSERT INTO conversation_context (user_id, conversation_id, role, content, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, conversation_id, 'user', prompt, start_time))
        
        cursor.execute('''
            INSERT INTO conversation_context (user_id, conversation_id, role, content, timestamp)
            VALUES (?, ?, ?, ?, ?)
        ''', (user_id, conversation_id, 'assistant', answer_text, end_time))
        conn.commit()
    conn.close()

async def main():
    # Initialize database before starting bot
    try:
        init_db()
        logging.info("Database initialized successfully")
    except Exception as e:
        logging.error(f"Failed to initialize database: {e}")
        raise
    
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
